[tool.poetry]
name = "animeippo"
version = "0.1.0"
description = ""
authors = ["Teemu Risikko <teemu.risikko@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
requests = "^2.28.2"
python-dotenv = "^1.0.0"
pandas = "^2.1.0"
scikit-learn = "^1.3.0"
flask = "^2.2.3"
flask-cors = "^3.0.10"
gunicorn = "^20.1.0"
redis = "^4.5.4"
pyarrow = "^14.0.1"
aiohttp = "^3.8.4"
async-lru = "^2.0.4"
fast-json-normalize = "^0.0.9"
polars = { extras = ["numpy", "pandas", "pyarrow"], version = "^0.20.2" }


[tool.poetry.group.dev.dependencies]
ipykernel = "^6.21.3"
requests-mock = "^1.10.0"
black = "^23.1.0"
ruff = "^0.0.257"
pytest = "^7.2.2"
bandit = "^1.7.5"
pytest-dotenv = "^0.5.2"
coverage = "^7.2.2"
pytest-mock = "^3.10.0"
matplotlib = "^3.7.1"
gprof2dot = "^2022.7.29"
profilehooks = "^1.12.0"
pytest-asyncio = "^0.21.0"
pydeps = "^1.12.8"
seaborn = "^0.13.0"


[tool.poetry.group.extras.dependencies]
xlsxwriter = "^3.1.9"
cohesion = "^1.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.bandit]
exclude_dirs = [".venv"]

[tool.bandit.assert_used]
skips = ['*/test_*.py'] # Pytest uses asserts

[tool.coverage.run]
source = ["animeippo"]
branch = true
command_line = "-m pytest tests"
data_file = ".coverage"
omit = ["animeippo/util/**"]

[tool.coverage.report]
fail_under = 100
skip_empty = true
skip_covered = true
sort = "-Cover"
show_missing = true
exclude_lines = [
  # Don't complain if non-runnable code isn't run:
  "if __name__ == .__main__.:",
]
omit = ["animeippo/__main__.py"]

[tool.pytest.ini_options]
filterwarnings = [
  "ignore:pkg_resources is deprecated as an API:DeprecationWarning:.*",
  "ignore:Deprecated call to `pkg_resources.declare_namespace.*:DeprecationWarning:.*",
]
env_files = ["conf/prod.env"]

[tool.ruff]
line-length = 100
exclude = [
  ".git",
  ".venv",
  ".ruff_cache",
  ".devcontainer",
  "__pycache__",
  ".pytest_cache",
  ".github",
]

[tool.black]
line-length = 100

[tool.pydeps]
max-bacon = 0
verbose = true
exclude = ["flask*"]
