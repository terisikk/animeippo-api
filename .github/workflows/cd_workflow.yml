name: Continuous Delivery

on:
  push:
    branches:
      - main

jobs:
  build:
    name: "Install and cache requirements"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry==1.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'
      - run: poetry install && poetry build
  unit-test:
    name: "Run unit tests with coverage"
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry==1.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'
      - run: poetry install
      - run: poetry run coverage run
      - run: poetry run coverage report
  static-analysis:
    name: "Static analysis with ruff"
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry==1.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'
      - run: poetry install
      - run: poetry run ruff check .
  security-analysis:
    name: "Security analysis with bandit"
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry==1.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'
      - run: poetry install
      - run: poetry run bandit -q -c pyproject.toml -r .
  formatting:
    name: "Check formatting with black"
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry==1.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'
      - run: poetry install
      - run: poetry run black -q --check .
  build-and-publish:
    runs-on: ubuntu-latest
    name: "Docker image build & publish"
    needs:
      - build
      - unit-test
      - static-analysis
      - security-analysis
      - formatting
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          cache-from: type=registry,ref={{ secrets.DOCKER_REGISTRY }}/animeippo-api:latest
          cache-to: type=inline
          tags: ${{ secrets.DOCKER_REGISTRY }}/animeippo-api:latest
